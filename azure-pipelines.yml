# azure-pipelines.yml
trigger:
  - main

pool:
  name: Default    # self-hosted Windows agent pool

variables:
  - name: ToscaClientId
    value: '8p7RqVEK1km6Xj96INYY2g'
  - name: ToscaClientSecret
    value: 'y80uGn2kvEuqBFv7-u7RpQjmb6SVS9-UqDxl4HlNff9w'       # <<-- set actual secret value in pipeline UI and mark as secret

stages:
  - stage: RunTosca
    displayName: Run Tosca Execution Client (Windows)
    jobs:
      - job: RunToscaJob
        displayName: Run on self-hosted Windows agent
        steps:
          - checkout: self

          - powershell: |
              Write-Host "=== Locating tosca_execution_client.ps1 ==="
              $root = "$(Build.SourcesDirectory)"
              $candidates = @(
                Join-Path $root "scripts\tosca_execution_client.ps1",
                Join-Path $root "tosca_execution_client.ps1"
              )

              $scriptPath = $null
              foreach ($p in $candidates) {
                if (Test-Path $p) {
                  $scriptPath = $p
                  break
                }
              }

              if (-not $scriptPath) {
                Write-Error "tosca_execution_client.ps1 not found in repo. Expected at either:`n  $($candidates -join "`n  ")"
                exit 1
              }

              Write-Host "Using script: $scriptPath"

              # Unblock if downloaded/blocked (safe no-op)
              try {
                Unblock-File -Path $scriptPath -ErrorAction Stop
                Write-Host "Unblock-File applied (if required)."
              } catch {
                Write-Host "Unblock-File not required or failed: $($_.Exception.Message)"
              }

              # Publish chosen path for next step
              Write-Host "##vso[task.setvariable variable=ChosenScriptPath]$scriptPath"
            displayName: 'Detect & unblock script (repo root or scripts/)'

          - powershell: |
              $scriptPath = '$(ChosenScriptPath)'
              if (-not (Test-Path $scriptPath)) {
                Write-Error "Script not found at $scriptPath"
                exit 1
              }

              # Build arguments array explicitly (avoid using automatic $args)
              $argArray = @(
                '-toscaServerUrl', 'http://127.0.0.1:81/'
                '-projectName', 'TestCI'
                '-events', '["Test"]'
                '-clientId', '$(ToscaClientId)'
                '-clientSecret', '$(ToscaClientSecret)'
              )

              # Safely quote any argument that contains whitespace or special characters
              $safeArgs = @()
              foreach ($a in $argArray) {
                if ($a -match '\s' -or $a -match '[\[\]\{\}\"]' -or $a -eq '') {
                  # Wrap in double quotes and escape any inner double quotes
                  $escaped = $a -replace '"', '\"'
                  $safeArgs += '"' + $escaped + '"'
                } else {
                  $safeArgs += $a
                }
              }

              $quotedArgs = $safeArgs -join ' '

              Write-Host "Launching child PowerShell with ExecutionPolicy Bypass..."
              Write-Host "Command: powershell.exe -NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`" $quotedArgs"

              $psi = New-Object System.Diagnostics.ProcessStartInfo
              $psi.FileName = 'powershell.exe'
              $psi.Arguments = "-NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`" $quotedArgs"
              $psi.RedirectStandardOutput = $true
              $psi.RedirectStandardError  = $true
              $psi.UseShellExecute = $false

              $proc = [System.Diagnostics.Process]::Start($psi)
              $stdout = $proc.StandardOutput.ReadToEnd()
              $stderr = $proc.StandardError.ReadToEnd()
              $proc.WaitForExit()

              Write-Host $stdout
              if ($proc.ExitCode -ne 0) {
                Write-Error "Tosca execution client failed with exit code $($proc.ExitCode). Stderr:`n$stderr"
                exit $proc.ExitCode
              } else {
                Write-Host "Tosca execution client completed successfully."
              }
            displayName: 'Run tosca_execution_client.ps1 (ExecutionPolicy Bypass)'
